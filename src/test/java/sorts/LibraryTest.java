/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sorts;

import org.junit.Before;
import org.junit.Test;
import org.junit.Assert;
import java.util.Arrays;

public class LibraryTest {

    int[] testArray;
    int[] testArray2;

    @Before public void init() {
        testArray = new int[]{4, 5, 1, 2, 3}; // Odd length test array.
        testArray2 = new int[]{4, 3, 1, 2}; // Even length test array.
    }

    @Test public void testQuickSortSafeCases() {
        sorts.quickSort(testArray, 0, testArray.length-1);
        Assert.assertEquals("Should be sorted in ascending order.", "[1, 2, 3, 4, 5]", Arrays.toString(testArray));
        sorts.quickSort(testArray2, 0, testArray2.length-1);
        Assert.assertEquals("Should be sorted in ascending order.", "[1, 2, 3, 4]", Arrays.toString(testArray2));
    }

    @Test public void testQuickSortEdgeCases() {
        int[] testSingle = {1};
        int[] testEmpty= {};
        int[] testDuo = {2, 1};
        sorts.quickSort(testEmpty, 0, testEmpty.length-1);
        Assert.assertEquals("Empty","[]", Arrays.toString(testEmpty));
        sorts.quickSort(testSingle, 0, testSingle.length-1);
        Assert.assertEquals("Single", "[1]", Arrays.toString(testSingle));
        sorts.quickSort(testDuo, 0, testDuo.length-1);
        Assert.assertEquals("Duo", "[1, 2]", Arrays.toString(testDuo));
    }

    @Test public void testInsertionSortSafeCases() {
        int[] testArr = {7, 1, 4, 3, 5, 2, 6};
        sorts.insertionSort(testArr);
        Assert.assertEquals("Should be sorted in ascending order.", "[1, 2, 3, 4, 5, 6, 7]", Arrays.toString(testArr));

        int[] testArr2 = {2,1,3};
        sorts.insertionSort(testArr2);
        Assert.assertEquals("Should be sorted in ascending order.", "[1, 2, 3]", Arrays.toString(testArr2));

        int[] testArr3 = {2,1};
        sorts.insertionSort(testArr3);
        Assert.assertEquals("Should be sorted in ascending order.", "[1, 2]", Arrays.toString(testArr3));
    }

    @Test public void testInsertionSortEdgeCases() {
        int[] testArr = {};
        sorts.insertionSort(testArr);
        Assert.assertEquals("Should be sorted in ascending order.", "[]", Arrays.toString(testArr));

        int[] testArr2 = {1};
        sorts.insertionSort(testArr2);
        Assert.assertEquals("Should be sorted in ascending order.", "[1]", Arrays.toString(testArr2));

    }

    @Test public void testMergeSortSafe() {
        sorts.mergeSort(testArray);
        sorts.mergeSort(testArray2);
        Assert.assertEquals("Should be sorted in ascending order.", "[1, 2, 3, 4, 5]", Arrays.toString(testArray));
        Assert.assertEquals("Should be sorted in ascending order.", "[1, 2, 3, 4]", Arrays.toString(testArray2));
    }

    @Test public void testMergeSortEdge() {
        int[] testArr = {2};
        sorts.mergeSort(testArr);
        Assert.assertEquals("[2]", "[2]", Arrays.toString(testArr));
        int[] testArr2 = {};
        sorts.mergeSort(testArr);
        Assert.assertEquals("Empty array", "[]", Arrays.toString(testArr2));
    }


}
